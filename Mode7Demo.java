
//--test class
import com.jogamp.opengl.*;
import com.jogamp.opengl.util.*;
import com.jogamp.opengl.awt.GLJPanel;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

class Mode7Demo {  
	
	private JPanel rootPane;
	private JPanel settingsPanel;
	private static JRadioButton noRepeatRadioButton;
	private static JRadioButton repeatRadioButton;
	private static JRadioButton antiClockwiseRadioButton;
	private static JRadioButton clockwiseRadioButton;
	private static JToggleButton animationButton;
	private static JSlider slider1;
	private static JSlider slider2;
	private static JSlider slider3;
	private static JSlider slider4;
	private static JSlider slider5;


	private static GLJPanel gljpanel;
	static FPSAnimator animtr;
	static Renderer rend = new Renderer();

	public static void main(String[] args) {
		
		//Use native look and feel
		try {
			//for linux systems like KDE try to use GTK's looks and feel
			if (System.getProperty("os.name").equals("Linux")) {
			
				//UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
				UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
				
			} else {
				
				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			}
			
		} catch (Exception e) {
			
			System.out.println(e);
		}
		
		JFrame jframe = new JFrame("Java OpenGL Mode 7 Demo");
	        jframe.getContentPane().add(new Mode7Demo().rootPane);
        	jframe.setSize(640, 480);
		jframe.pack();
        	jframe.setVisible(true);

		slider1.setValue(0);
		slider2.setValue(0);
		slider4.setValue(0);
		slider5.setValue(0);
		
		slider3.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider3.getValue();

				if (v > 0) {
					
					rend.scaleFactor = (float) v / 100;
				}
			}
		});

		slider1.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider1.getValue();
				
				if (v > 0) {
					
					rend.panH = (float) v / 100;
				
				} else {
					
					rend.panH = 0;
				}
			}
		});

		slider2.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider2.getValue();
				
				if (v > 0) {
					
					rend.panV = (float) v / 100;
				
				} else {
					
					rend.panV = 0;
				}
			}
		});

		slider4.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider4.getValue();
				
				if (v > 0) {
					
					rend.shearH = (float) v / 100;
				
				} else {
					
					rend.shearH = 0;
				}
			}
		});

		slider5.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider5.getValue();
				
				if (v > 0) {
					
					rend.shearV = (float) v / 100;
				
				} else {
					
					rend.shearV = 0;
				}
			}
		});
		
		antiClockwiseRadioButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				rend.clockwise = false;
			}
		});

		clockwiseRadioButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				rend.clockwise = true;
			}
		});
		
		repeatRadioButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				rend.repeat = true;
			}
		});
		
		noRepeatRadioButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				rend.repeat = false;
			}
		});

		animationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				if (animationButton.isSelected() == true) {
					
					animationButton.setText("Stop");
					rend.rot = true;
					
					if (clockwiseRadioButton.isSelected() != true) {
						
						rend.clockwise = false;

					} else {
						
						rend.clockwise = true;
					}
				
				} else {
					
					animationButton.setText("Start");
					rend.rot = false;
				}

			}
		});

		jframe.addWindowListener(new WindowAdapter() {
            	
			public void windowClosing(WindowEvent windowevent) {
                		
				jframe.dispose();
                		System.exit(0);
            		}
        	});
	}

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */

	private void $$$setupUI$$$() {
		rootPane = new JPanel();
		rootPane.setLayout(new GridBagLayout());
		settingsPanel = new JPanel();
		settingsPanel.setLayout(new GridBagLayout());
		settingsPanel.setPreferredSize(new Dimension(245, 333));
		settingsPanel.setRequestFocusEnabled(false);
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(5, 5, 5, 5);
		rootPane.add(settingsPanel, gbc);
		settingsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Settings", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.TOP));
		antiClockwiseRadioButton = new JRadioButton();
		antiClockwiseRadioButton.setText("Anti-Clockwise");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(antiClockwiseRadioButton, gbc);
		noRepeatRadioButton = new JRadioButton();
		noRepeatRadioButton.setSelected(false);
		noRepeatRadioButton.setText("No-Repeat");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(noRepeatRadioButton, gbc);
		animationButton = new JToggleButton();
		animationButton.setSelected(false);
		animationButton.setText("Start");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(animationButton, gbc);
		final JLabel label1 = new JLabel();
		Font label1Font = this.$$$getFont$$$(null, Font.BOLD, -1, label1.getFont());
		if (label1Font != null) label1.setFont(label1Font);
		label1.setText("Animation");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label1, gbc);
		final JLabel label2 = new JLabel();
		Font label2Font = this.$$$getFont$$$(null, Font.BOLD, -1, label2.getFont());
		if (label2Font != null) label2.setFont(label2Font);
		label2.setText("Texture");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label2, gbc);
		final JLabel label3 = new JLabel();
		Font label3Font = this.$$$getFont$$$(null, Font.BOLD, -1, label3.getFont());
		if (label3Font != null) label3.setFont(label3Font);
		label3.setText("Rotation");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label3, gbc);
		final JLabel label4 = new JLabel();
		Font label4Font = this.$$$getFont$$$(null, Font.BOLD, -1, label4.getFont());
		if (label4Font != null) label4.setFont(label4Font);
		label4.setText("Pan horizontal");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label4, gbc);
		slider1 = new JSlider();
		slider1.setMajorTickSpacing(50);
		slider1.setMinorTickSpacing(10);
		slider1.setPaintTicks(true);
		slider1.setPaintTrack(true);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(slider1, gbc);
		slider2 = new JSlider();
		slider2.setMajorTickSpacing(50);
		slider2.setMinorTickSpacing(10);
		slider2.setPaintTicks(true);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(slider2, gbc);
		final JLabel label5 = new JLabel();
		Font label5Font = this.$$$getFont$$$(null, Font.BOLD, -1, label5.getFont());
		if (label5Font != null) label5.setFont(label5Font);
		label5.setText("Pan vertical");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label5, gbc);
		final JLabel label6 = new JLabel();
		Font label6Font = this.$$$getFont$$$(null, Font.BOLD, -1, label6.getFont());
		if (label6Font != null) label6.setFont(label6Font);
		label6.setText("Scale");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 7;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label6, gbc);
		slider3 = new JSlider();
		slider3.setInverted(false);
		slider3.setMajorTickSpacing(50);
		slider3.setMinorTickSpacing(10);
		slider3.setPaintTicks(true);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 7;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(slider3, gbc);
		final JLabel label7 = new JLabel();
		Font label7Font = this.$$$getFont$$$(null, Font.BOLD, -1, label7.getFont());
		if (label7Font != null) label7.setFont(label7Font);
		label7.setText("Shear horizontal");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 8;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label7, gbc);
		slider4 = new JSlider();
		slider4.setMajorTickSpacing(50);
		slider4.setMinorTickSpacing(10);
		slider4.setPaintTicks(true);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 8;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(slider4, gbc);
		final JLabel label8 = new JLabel();
		Font label8Font = this.$$$getFont$$$(null, Font.BOLD, -1, label8.getFont());
		if (label8Font != null) label8.setFont(label8Font);
		label8.setText("Shear vertical");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 9;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label8, gbc);
		slider5 = new JSlider();
		slider5.setMajorTickSpacing(50);
		slider5.setMinorTickSpacing(10);
		slider5.setPaintTicks(true);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 9;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 5, 5);
		settingsPanel.add(slider5, gbc);
		clockwiseRadioButton = new JRadioButton();
		clockwiseRadioButton.setEnabled(true);
		clockwiseRadioButton.setSelected(true);
		clockwiseRadioButton.setText("Clockwise");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(clockwiseRadioButton, gbc);
		repeatRadioButton = new JRadioButton();
		repeatRadioButton.setSelected(true);
		repeatRadioButton.setText("Repeat");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(repeatRadioButton, gbc);
		final JLabel label9 = new JLabel();
		label9.setText("Author: Karma Chameleon");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.insets = new Insets(0, 10, 10, 10);
		rootPane.add(label9, gbc);
		final JLabel label10 = new JLabel();
		label10.setText(" OpenGL Mode 7 Demo");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.insets = new Insets(10, 10, 5, 10);
		rootPane.add(label10, gbc);
		ButtonGroup buttonGroup;
		buttonGroup = new ButtonGroup();
		buttonGroup.add(clockwiseRadioButton);
		buttonGroup.add(antiClockwiseRadioButton);
		buttonGroup = new ButtonGroup();
		buttonGroup.add(repeatRadioButton);
		buttonGroup.add(noRepeatRadioButton);

		//OpenGL panel
		GLProfile glprofile = GLProfile.get("GL3");
		GLCapabilities glcapabilities = new GLCapabilities(glprofile);
		GLJPanel gljpanel = new GLJPanel(glcapabilities);
		gljpanel.setPreferredSize(new Dimension(512, 512));
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.gridheight = 3;
		gbc.fill = GridBagConstraints.BOTH;
		rootPane.add(gljpanel, gbc);
		gljpanel.addGLEventListener(rend);
		animtr = new FPSAnimator(gljpanel, 60);
		animtr.start();
	}
	
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}
}

