
//--test class
import com.jogamp.opengl.*;
import com.jogamp.opengl.util.*;
import com.jogamp.opengl.awt.GLJPanel;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

class test {  
	
	private JPanel rootPane;
	private JPanel settingsPanel;
	private JRadioButton noRepeatRadioButton;
	private JRadioButton repeatRadioButton;
	private JRadioButton antiClockwiseRadioButton;
	private static JRadioButton clockwiseRadioButton;
	private static JSlider slider1;
	private static JSlider slider2;
	private static JSlider slider3;
	private static JToggleButton animationButton;

	private static GLJPanel gljpanel;
	static FPSAnimator animtr;
	static Renderer rend = new Renderer();

	public static void main(String[] args) {
		
		//Use native look and feel
		try {
			//for linux systems like KDE try to use GTK's looks and feel
			if (System.getProperty("os.name").equals("Linux")) {
			
				//UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
				UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
				
			} else {
				
				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			}
			
		} catch (Exception e) {
			
			System.out.println(e);
		}
		
		JFrame jframe = new JFrame("Jogl test");
	        jframe.getContentPane().add(new test().rootPane);
        	jframe.setSize(640, 480);
		jframe.pack();
        	jframe.setVisible(true);

		slider1.setValue(0);
		slider2.setValue(0);
		
		slider3.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider3.getValue();

				if (v > 0) {
					
					rend.scaleFactor = (float) v / 100;
				}
			}
		});

		slider1.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider1.getValue();
				
				if (v > 0) {
					
					rend.panH = (float) v / 100;
				
				} else {
					
					rend.panH = 0;
				}
			}
		});

		slider2.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				
				int v = slider2.getValue();
				
				if (v > 0) {
					
					rend.panV = (float) v / 100;
				
				} else {
					
					rend.panV = 0;
				}
			}
		});

		animationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				if (animationButton.isSelected() == true) {
					
					animationButton.setText("Stop");
					rend.rot = true;
					
					if (clockwiseRadioButton.isSelected() != true) {
						
						rend.clockwise = false;

					} else {
						
						rend.clockwise = true;
					}
				
				} else {
					
					animationButton.setText("Start");
					rend.rot = false;
				}

			}
		});

		jframe.addWindowListener(new WindowAdapter() {
            	
			public void windowClosing(WindowEvent windowevent) {
                		
				jframe.dispose();
                		System.exit(0);
            		}
        	});
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		rootPane = new JPanel();
		rootPane.setLayout(new GridBagLayout());
		settingsPanel = new JPanel();
		settingsPanel.setLayout(new GridBagLayout());
		settingsPanel.setPreferredSize(new Dimension(243, 152));
		settingsPanel.setRequestFocusEnabled(false);
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(5, 5, 5, 5);
		rootPane.add(settingsPanel, gbc);
		settingsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Settings", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.TOP));
		antiClockwiseRadioButton = new JRadioButton();
		antiClockwiseRadioButton.setText("Anti-Clockwise");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 5, 0);
		settingsPanel.add(antiClockwiseRadioButton, gbc);
		repeatRadioButton = new JRadioButton();
		repeatRadioButton.setSelected(true);
		repeatRadioButton.setText("Repeat");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 5, 0);
		settingsPanel.add(repeatRadioButton, gbc);
		noRepeatRadioButton = new JRadioButton();
		noRepeatRadioButton.setSelected(false);
		noRepeatRadioButton.setText("No-Repeat");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 5, 0);
		settingsPanel.add(noRepeatRadioButton, gbc);
		animationButton = new JToggleButton();
		animationButton.setSelected(false);
		animationButton.setText("Start");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 5, 0);
		settingsPanel.add(animationButton, gbc);
		final JLabel label1 = new JLabel();
		Font label1Font = this.$$$getFont$$$(null, Font.BOLD, -1, label1.getFont());
		if (label1Font != null) label1.setFont(label1Font);
		label1.setText("Animation");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label1, gbc);
		final JLabel label2 = new JLabel();
		Font label2Font = this.$$$getFont$$$(null, Font.BOLD, -1, label2.getFont());
		if (label2Font != null) label2.setFont(label2Font);
		label2.setText("Texture");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label2, gbc);
		clockwiseRadioButton = new JRadioButton();
		clockwiseRadioButton.setEnabled(true);
		clockwiseRadioButton.setSelected(true);
		clockwiseRadioButton.setText("Clockwise");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 5, 0);
		settingsPanel.add(clockwiseRadioButton, gbc);
		final JLabel label3 = new JLabel();
		Font label3Font = this.$$$getFont$$$(null, Font.BOLD, -1, label3.getFont());
		if (label3Font != null) label3.setFont(label3Font);
		label3.setText("Rotation");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 5, 5);
		settingsPanel.add(label3, gbc);
		final JLabel label4 = new JLabel();
		Font label4Font = this.$$$getFont$$$(null, Font.BOLD, -1, label4.getFont());
		if (label4Font != null) label4.setFont(label4Font);
		label4.setText("Pan horizontal");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 5, 0, 5);
		settingsPanel.add(label4, gbc);
		slider1 = new JSlider();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 5, 0);
		settingsPanel.add(slider1, gbc);
		slider2 = new JSlider();
		slider2.setMinimumSize(new Dimension(16, 100));
		slider2.setOrientation(1);
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.NORTHWEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		settingsPanel.add(slider2, gbc);
		final JLabel label5 = new JLabel();
		Font label5Font = this.$$$getFont$$$(null, Font.BOLD, -1, label5.getFont());
		if (label5Font != null) label5.setFont(label5Font);
		label5.setText("Pan verticle");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.NORTHWEST;
		gbc.insets = new Insets(40, 5, 0, 5);
		settingsPanel.add(label5, gbc);
		final JLabel label6 = new JLabel();
		Font label6Font = this.$$$getFont$$$(null, Font.BOLD, -1, label6.getFont());
		if (label6Font != null) label6.setFont(label6Font);
		label6.setText("Scale");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 7;
		gbc.anchor = GridBagConstraints.NORTHWEST;
		gbc.insets = new Insets(0, 5, 0, 5);
		settingsPanel.add(label6, gbc);
		slider3 = new JSlider();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 7;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.NORTHWEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.ipadx = 2;
		gbc.insets = new Insets(0, 0, 5, 0);
		settingsPanel.add(slider3, gbc);
		ButtonGroup buttonGroup;
		buttonGroup = new ButtonGroup();
		buttonGroup.add(clockwiseRadioButton);
		buttonGroup.add(antiClockwiseRadioButton);
		buttonGroup = new ButtonGroup();
		buttonGroup.add(repeatRadioButton);
		buttonGroup.add(noRepeatRadioButton);
		
		//OpenGL panel
		GLProfile glprofile = GLProfile.get("GL3");
		GLCapabilities glcapabilities = new GLCapabilities(glprofile);
		GLJPanel gljpanel = new GLJPanel(glcapabilities);
		gljpanel.setPreferredSize(new Dimension(512, 512));
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		rootPane.add(gljpanel, gbc);
		gljpanel.addGLEventListener(rend);
		animtr = new FPSAnimator(gljpanel, 60);
		animtr.start();
	}
	
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}
}

class Vector {

	float x;
	float y;
	float z;
	static final int X = 0, Y = 1, Z = 2;

	Vector(float x, float y, float z) {
		
		this.x = x;
		this.y = y;
		this.z = z;
	}

	void scalarAdd(float s) {
		
		x = x + s;
		y = y + s;
		z = z + s;
	}
	
	void scalarSub(float s) {
		
		x = x - s;
		y = y - s;
		z = z - s;
	}
	
	void scalarMulti(float s) {
		
		x = x * s;
		y = y * s;
		z = z * s;
	}

	void scalarDiv(float s) {
		
		if (s != 0) {
			
			x = x / s;
			y = y / s;
			z = z / s;
		}
	}
	
	void vectorAdd(Vector v) {
		
		x = x + v.x;
		y = y + v.y;
		z = z + v.z;
	}
	
	void vectorSub(Vector v) {
		
		x = x - v.x;
		y = y - v.y;
		z = z - v.z;
	}

	void vectorMulti(Vector v) {
		
		x = x * v.x;
		y = y * v.y;
		z = z * v.z;
	}

	void vectorDiv(Vector v) {
		
		if (v.x != 0 || v.y != 0 || v.z != 0) {
			
			x = x / v.x;
			y = y / v.y;
			z = z / v.z;
		}
	}
	
	//angle in radians
	void vectorRot(double angle, int axis) {
		
		if (axis == Z) {
		
			this.x = (float) Math.cos(angle) * x - (float) Math.sin(angle) * y;
			this.y = (float) Math.sin(angle) * x + (float) Math.cos(angle) * y;
		}
	};

	float[] toArray() {
	
		float array[] = {x, y, z};
		
		return array;
	}

	public String toString() {
		
		return new String("(" + x + ", " + y + ", " + z + ")");
	}
}

















